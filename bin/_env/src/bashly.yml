name: env
help: Environment Control application
version: 1.0.0
commands:
  - name: up
    help: similar to docker-compose up, but sets all the required environment
      variables for buildkit. (All docker command options are valid)
    catch_all: true
    flags:
      - long: --attach
        short: -f
        help: By default, the containers are started daemonized, use this to attach to
          their output
  - name: stop
    help: simple alias to docker-compose stop
    catch_all: true
  - name: restart
    help: simple alias to docker-compose stop and docker-compose up
    flags:
      - long: --force
        short: -f
        help: Force the restart of the containers (using docker-compose down)
      - long: --attach
        short: -a
        help: Do not start the new containers deamonized, but attach to their output
  - name: down
    help: simple alias to docker-compose down
    catch_all: true
  - name: clean
    help: removes the existing container image
    flags:
      - long: --yes
        short: -y
        help: Don't ask just do...
  - name: logs
    help: simple alias to docker-compose logs (All docker command options are valid)
    catch_all: true
    args:
      - name: service
        help: Allows you to define which service you want to connect to
  - name: build
    help: builds the docker image for local testing
  - name: rebuild-cli
    help: rebuilds the bashly application you are currently using, based on the
      sources
  - name: ssh
    alias: shell
    help: basically your docker-compose exec into the main app container
    args:
      - name: service
        help: Allows you to define which service you want to connect to
    flags:
      - long: --cmd
        short: -c
        arg: command
        help: By default, we will use the users configured shell, you can use "sh" or
          any other command if you want to
  - name: composer
    help: runs a certain composer command for the project
    catch_all: true
  - name: test
    help: allows you to run tests against the current codebase
    commands:
      - name: unit
        help: runs the unit test cases
        catch_all: true
        flags:
          - long: --coverage
            short: -c
            help: Generates a coverage report
          - long: --coverage-text
            short: -t
            help: Generates a coverage report in text format
  - name: frontend
    help: Runs certain tasks for the frontend client
    commands:
      - name: build
        help: builds the frontend client
      - name: watch
        help: watches the frontend client for changes
